"""
На координатной плоскости рисуются окружности, у каждой окружности следующие
параметры: координаты X и Y центра окружности и значение R ― это радиус
окружности. По умолчанию центр находится в (0, 0), а радиус равен 1.

Реализуйте класс «Окружность», который инициализируется по этим параметрам. Круг также может:
1. Находить и возвращать свою площадь.
2. Находить и возвращать свой периметр.
3. Определять, пересекается ли он с другой окружностью.
4. Отображать информацию об объекте класса.
"""
import math


class Circle:
    """Описание окружности"""

    def __init__(self, x=0, y=0, r=1):
        self.x = x
        self.y = y
        self.r = r

    def get_area(self):
        """Нахождение площади окружности"""
        return math.pi * pow(self.r, 2)

    def get_perimeter(self):
        """Нахождение периметра окружности"""
        return 2 * math.pi * self.r

    def is_intersect(self, other):
        """Проверка пересечения одной окружности с другой.
        Две окружности пересекаются тогда и только тогда,
        когда расстояние между их центрами равно сумме
        и разности их радиусов.
        (R0 - R1)^2 <= (x0 - x1)^2 + (y0 - y1)^2 <= (R0 + R1)^2
        """
        return (self.r - other.r) ** 2 <= \
            (self.x - other.x) ** 2 + (self.y - other.y) ** 2 <= \
            (self.r + other.r) ** 2

    def __str__(self):
        """Информация об окружности"""
        return f"Центр окружности: {(self.x, self.y)}" \
               f"\nРадиус окружности: {self.r}"


if __name__ == "__main__":
    first_circle = Circle()
    second_circle = Circle(1, 1, 3)
    print(first_circle,
          f'\nПлощадь окружности: {first_circle.get_area()}'
          f'\nПериметр окружности: {first_circle.get_perimeter()}'
          f'\nПересекается ли окружность: {first_circle.is_intersect(second_circle)}')
